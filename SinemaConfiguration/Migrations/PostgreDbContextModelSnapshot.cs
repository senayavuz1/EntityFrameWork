// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SinemaConfiguration.Contexts;

namespace SinemaConfiguration.Migrations
{
    [DbContext(typeof(PostgreDbContext))]
    partial class PostgreDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.16")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("CategoriFilm", b =>
                {
                    b.Property<int>("CategorisId")
                        .HasColumnType("integer");

                    b.Property<int>("FilmlerId")
                        .HasColumnType("integer");

                    b.HasKey("CategorisId", "FilmlerId");

                    b.HasIndex("FilmlerId");

                    b.ToTable("CategoriFilm");
                });

            modelBuilder.Entity("SinemaEntity.Entites.Categori", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("KategoriAdi")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Categori");
                });

            modelBuilder.Entity("SinemaEntity.Entites.Film", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Akilama")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("FilmAdi")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<short>("Sure")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.ToTable("Film");
                });

            modelBuilder.Entity("SinemaEntity.Entites.Gosterim", b =>
                {
                    b.Property<int>("SalonId")
                        .HasColumnType("integer");

                    b.Property<int>("FilmId")
                        .HasColumnType("integer");

                    b.Property<int>("WeekId")
                        .HasColumnType("integer");

                    b.Property<int>("SeansId")
                        .HasColumnType("integer");

                    b.HasKey("SalonId", "FilmId", "WeekId");

                    b.HasIndex("FilmId");

                    b.HasIndex("SeansId");

                    b.HasIndex("WeekId");

                    b.ToTable("Gosterim");
                });

            modelBuilder.Entity("SinemaEntity.Entites.Salon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<short>("Kapasite")
                        .HasColumnType("smallint");

                    b.Property<string>("SalonAdi")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Salon");
                });

            modelBuilder.Entity("SinemaEntity.Entites.Seans", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("SeansAdi")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Seans");
                });

            modelBuilder.Entity("SinemaEntity.Entites.Week", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("BaslangicTarihi")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("BitisTarihi")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("HaftaAdi")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Week");
                });

            modelBuilder.Entity("CategoriFilm", b =>
                {
                    b.HasOne("SinemaEntity.Entites.Categori", null)
                        .WithMany()
                        .HasForeignKey("CategorisId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SinemaEntity.Entites.Film", null)
                        .WithMany()
                        .HasForeignKey("FilmlerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SinemaEntity.Entites.Gosterim", b =>
                {
                    b.HasOne("SinemaEntity.Entites.Film", "Filmler")
                        .WithMany()
                        .HasForeignKey("FilmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SinemaEntity.Entites.Salon", "Salonlar")
                        .WithMany()
                        .HasForeignKey("SalonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SinemaEntity.Entites.Seans", "Seanslar")
                        .WithMany()
                        .HasForeignKey("SeansId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SinemaEntity.Entites.Week", "Haftalar")
                        .WithMany()
                        .HasForeignKey("WeekId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Filmler");

                    b.Navigation("Haftalar");

                    b.Navigation("Salonlar");

                    b.Navigation("Seanslar");
                });
#pragma warning restore 612, 618
        }
    }
}
